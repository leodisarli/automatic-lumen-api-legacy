<?php

namespace App\Repositories\{{entityCaps}};

use \Mockery;
use App\Queries\{{entityCaps}}\{{entityCaps}}DeleteQueries;
use Illuminate\Database\DatabaseManager;
use PHPUnit\Framework\TestCase;

class {{entityCaps}}DeleteRepositoryTest extends TestCase
{
    /**
     * @covers \App\Repositories\{{entityCaps}}\{{entityCaps}}DeleteRepository::__construct
     */
    public function testCanBeInstantiated()
    {
        $dbSpy = Mockery::spy(DatabaseManager::class);
        $queriesSpy = Mockery::spy({{entityCaps}}DeleteQueries::class);
        $repository = new {{entityCaps}}DeleteRepository($dbSpy, $queriesSpy);
        $this->assertInstanceOf({{entityCaps}}DeleteRepository::class, $repository);
    }

    /**
     * @covers \App\Repositories\{{entityCaps}}\{{entityCaps}}DeleteRepository::delete
     */
    public function testDelete()
    {
        $id = '70a49eb4-d746-4d17-8b46-5806af4ad36d';

        $dbMock = Mockery::mock(DatabaseManager::class);
        $dbMock->shouldReceive('table')
            ->once()
            ->with('{{entityOriginal}}')
            ->andReturnSelf()
            ->shouldReceive('where')
            ->once()
            ->with(['id'=> $id])
            ->andReturnSelf()
            ->shouldReceive('update')
            ->once()
            ->withAnyArgs()
            ->andReturn(true);

        $queriesSpy = Mockery::spy({{entityCaps}}DeleteQueries::class);

        $repository = new {{entityCaps}}DeleteRepository($dbMock, $queriesSpy);
        $response = $repository->delete(
            $id
        );

        $this->assertEquals(true, $response);
    }

    public function tearDown()
    {
        Mockery::close();
    }
}
